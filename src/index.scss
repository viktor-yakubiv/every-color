@use 'sass:list';
@use 'functions' as *;
@use 'mixins' as *;

$brand-accents: primary;
$semantic-accents: info, positive, warning, danger;
$accents: list.join(neutral, list.join($brand-accents, $semantic-accents));


/**
 * Object
 *
 * There are two types of objects:
 * - Content
 * - Surface
 *
 * Content is a generalisation for text and icons.
 * When applied with no modifiers, it does not do anything;
 * it is a placeholder object for extra verbosity or context control
 * in some cases.
 *
 * Surface applies background for itself along with the content colors
 * that could be used on it. Surface with no modifiers applied is neutral
 * in regard to the current theme.
 */

.content {}

.surface {
	@include surface;
}

:where(.surface) {
	@each $emphasis in $emphasises {
		--#{$emphasis}-content: var(--theme-neutral-#{$emphasis}-content);
	}
}


/**
 * Emphasis
 *
 * Applies emphasis level to text and icons. Could be major — high, contrasting
 * well with the surface, or minor (medium) — contrasting with surface to
 * be noticed but do not create noise.
 *
 * If appears on semantic surface, always respects it's color even if combined
 * with own accent.
 */

@each $emphasis in $emphasises {
	.#{$emphasis} {
		@include emphasis($emphasis);
		@include content;
	}
}


/**
 * Accent
 *
 * Applies a color schema to either content or surface.
 *
 * An accent could be used on a neutral or a vibrant surface in regards to
 * the current theme. Color accents apply both and rely on a proper resolution
 * by the the surface itself.
 *
 * See Contrast modifiers as well.
 */

:root {
	--major-content:
		var(--theme-major-content,
		var(--theme-neutral-major-content));
	--minor-content:
		var(--theme-minor-content,
		var(--theme-neutral-minor-content));
	--content: var(--major-content);
	color: var(--content);
}

.neutral {
	@include accent('neutral');
}

@each $accent in $brand-accents {
	.#{$accent} {
		@include accent($accent);
	}
}

@each $accent in $semantic-accents {
	.#{$accent} {
		@include accent($accent);
	}

	// Forcing higher level selector for nested elements under semantic accents
	// to prevent overriding
	.#{$accent}[class] > * {
		@include accent($accent);
	}
}

// TODO: Can surface be placed under a content with accent?
// TODO: Can a surface under a content with accent redefine the context?
:is(#{to-classes($semantic-accents)}) .surface {
	background: transparent;
}

:where(#{to-classes($all-accents)}) {
	@include emphasis;
	@include content;
}
